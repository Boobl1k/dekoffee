// <auto-generated />
using System;
using Main.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Main.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AddressUser", b =>
                {
                    b.Property<Guid>("AddressesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AddressesId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AddressUser");

                    b.HasData(
                        new
                        {
                            AddressesId = new Guid("328d54c1-bf3e-417b-9c16-1e3963f3e7a4"),
                            UserId = new Guid("0c3a4ac7-6fa2-4aad-a576-48ef57b1c999")
                        },
                        new
                        {
                            AddressesId = new Guid("a372bb6b-2e44-4cf9-8a3c-bdbee21b3472"),
                            UserId = new Guid("780c9e97-6564-4a35-8195-9544ba50d904")
                        },
                        new
                        {
                            AddressesId = new Guid("f0ca1801-3f08-4659-8151-db84f2ee90b1"),
                            UserId = new Guid("780c9e97-6564-4a35-8195-9544ba50d904")
                        });
                });

            modelBuilder.Entity("Main.Application.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Apartment")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Commentary")
                        .HasColumnType("text");

                    b.Property<int?>("Floor")
                        .HasColumnType("integer");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Section")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("328d54c1-bf3e-417b-9c16-1e3963f3e7a4"),
                            Apartment = "1304",
                            City = "Казань",
                            Floor = 13,
                            House = "35",
                            Section = 1,
                            Street = "Кремлевская"
                        },
                        new
                        {
                            Id = new Guid("a372bb6b-2e44-4cf9-8a3c-bdbee21b3472"),
                            Apartment = "65",
                            City = "Казань",
                            Floor = 3,
                            House = "69",
                            Section = 5,
                            Street = "Баева"
                        },
                        new
                        {
                            Id = new Guid("f0ca1801-3f08-4659-8151-db84f2ee90b1"),
                            Apartment = "555555",
                            City = "Казань",
                            Floor = 55,
                            House = "1337",
                            Section = 55,
                            Street = "Дениса Жукова"
                        });
                });

            modelBuilder.Entity("Main.Application.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeadlineTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ExecutorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LowerSelectedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpperSelectedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1bc39f8-0434-4c23-ab66-0db72ac81b14"),
                            AddressId = new Guid("328d54c1-bf3e-417b-9c16-1e3963f3e7a4"),
                            DeadlineTime = new DateTime(2024, 5, 16, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdateTime = new DateTime(2023, 5, 12, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            LowerSelectedTime = new DateTime(2023, 5, 12, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TotalSum = 8600m,
                            UpperSelectedTime = new DateTime(2024, 5, 16, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("0c3a4ac7-6fa2-4aad-a576-48ef57b1c999")
                        },
                        new
                        {
                            Id = new Guid("6b75f65b-52c5-402f-a446-a6c8ef14af80"),
                            AddressId = new Guid("a372bb6b-2e44-4cf9-8a3c-bdbee21b3472"),
                            DeadlineTime = new DateTime(2023, 5, 16, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdateTime = new DateTime(2023, 5, 12, 13, 10, 2, 0, DateTimeKind.Unspecified),
                            LowerSelectedTime = new DateTime(2023, 5, 12, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 6,
                            TotalSum = 10m,
                            UpperSelectedTime = new DateTime(2023, 5, 16, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("780c9e97-6564-4a35-8195-9544ba50d904")
                        },
                        new
                        {
                            Id = new Guid("964d25df-c2ac-4511-b43f-6588394afd52"),
                            AddressId = new Guid("f0ca1801-3f08-4659-8151-db84f2ee90b1"),
                            DeadlineTime = new DateTime(2024, 10, 16, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            ExecutorId = new Guid("b1f872ed-1a8b-4d71-8694-e9273287f8ec"),
                            LastUpdateTime = new DateTime(2023, 5, 12, 18, 10, 2, 0, DateTimeKind.Unspecified),
                            LowerSelectedTime = new DateTime(2023, 5, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 4,
                            TotalSum = 1000000m,
                            UpperSelectedTime = new DateTime(2024, 5, 16, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("780c9e97-6564-4a35-8195-9544ba50d904")
                        });
                });

            modelBuilder.Entity("Main.Application.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("EnergyValue")
                        .HasColumnType("double precision");

                    b.Property<double>("Gross")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<double>("Net")
                        .HasColumnType("double precision");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca4f0c3e-67c0-429b-824f-d13a1ad1b4fe"),
                            Country = "Норвегия",
                            Description = "Самый популярный вид кофе в Европе, готовится в кофемашине, требует специального, очень ровного помола. Готовят из смеси арабики и робусты, часто из специально собранных купажей. Для хорошо приготовленного кофе характерна плотная, устойчивая пенка светло-кремового цвета. Пьют после еды, в несколько глотков, так, чтобы кофе не успел остыть. Пенку перемешивают с жидкостью, для придания равномерного вкуса всему напитку. Стандартный объем порции – 35 грамм.",
                            EnergyValue = 9.0,
                            Gross = 45.0,
                            IsBlocked = false,
                            Net = 35.0,
                            Price = 1000m,
                            Title = "Эспрессо"
                        },
                        new
                        {
                            Id = new Guid("2c8f1066-892a-4737-9901-286a2127c846"),
                            Country = "Федеративные Штаты Микронезии",
                            Description = "Двойной эспрессо. Пьют горячим, иногда с тростниковым сахаром.",
                            EnergyValue = 9.0,
                            Gross = 80.0,
                            IsBlocked = false,
                            Net = 70.0,
                            Price = 1700m,
                            Title = "Доппио"
                        },
                        new
                        {
                            Id = new Guid("7348c294-82c0-4bfb-9072-7afc8bec3d82"),
                            Country = "Венесуэла",
                            Description = "Эспрессо, в который добавлена порция хорошо взбитых сливок. Сверху они посыпаются ароматными специями и шоколадом. Подают в чашках среднего или большого объема. Пьют в любое время дня и ночи, обычно с десертами или выпечкой. В процессе употребления такой кофе не принято перемешивать.",
                            EnergyValue = 6.0,
                            Gross = 110.0,
                            IsBlocked = false,
                            Net = 100.0,
                            Price = 2200m,
                            Title = "Кофе по-венски"
                        },
                        new
                        {
                            Id = new Guid("6eb85d1a-1839-4f07-92e3-8c7d9a281f09"),
                            Country = "Мальта",
                            Description = "Эспрессо по-римски. Готовят, как обычный эспрессо, подают с долькой лимона или длинной закрученной полоской лимонной цедры. Пьют после еды, без десертов и сладостей.",
                            EnergyValue = 7.5,
                            Gross = 90.0,
                            IsBlocked = false,
                            Net = 80.0,
                            Price = 2000m,
                            Title = "Романо"
                        },
                        new
                        {
                            Id = new Guid("ebe0fa86-e594-468d-b375-3a281a705f06"),
                            Country = "Суринам",
                            Description = "Имеет очень маленький объем и низкое содержание кофеина. Для приготовления берется 5-7 грамм кофе на 25 грамм воды. Очень распространен в Италии, у нас популярность напитка гораздо ниже. Подают ристретто после обеда или ужина, без сахара, с бокалом холодной воды. Сначала делают несколько глотков воды, затем быстро выпивают ристретто. Вода нужна, чтобы очистить вкусовые рецепторы после приема пищи, и предотвратить обезвоживание после крепкого кофе.",
                            EnergyValue = 4.0,
                            Gross = 40.0,
                            IsBlocked = false,
                            Net = 30.0,
                            Price = 700m,
                            Title = "Ристретто"
                        },
                        new
                        {
                            Id = new Guid("403d26f4-5f81-4682-b073-06a507bf9944"),
                            Country = "Экваториальная Гвинея",
                            Description = "Переходный вариант между эспрессо и американо. Можно сказать, американо по-итальянски. Объем эспрессо увеличивается в два раза за счет воды. Пьют после еды. Обычно такой рецепт выбирают те, кто хочет снизить порцию кофеина, но не готов отказаться от него совсем.",
                            EnergyValue = 4.0,
                            Gross = 50.0,
                            IsBlocked = false,
                            Net = 40.0,
                            Price = 800m,
                            Title = "Лунго"
                        },
                        new
                        {
                            Id = new Guid("cfbd118c-51e4-4a29-9ddd-58777d85e0a3"),
                            Country = "Гаити",
                            Description = "Эспрессо, разбавленный водой. После приготовления основной порции в 30 мл, бариста прогоняет дополнительно еще 90-120 грамм воды, увеличивая объем без повышения крепости напитка. Пьют после еды или в перерывах между ней, с добавлением сахара, молока, сливок. Американо зачастую сопровождается десертами или печеньем.",
                            EnergyValue = 9.5,
                            Gross = 140.0,
                            IsBlocked = false,
                            Net = 130.0,
                            Price = 3300m,
                            Title = "Американо"
                        },
                        new
                        {
                            Id = new Guid("5ef11ced-6193-4116-9de2-0811f2340602"),
                            Country = "Ямайка",
                            Description = "В переводе с итальянского означает «пятнистый». Название получил за внешний вид. Это обычный эспрессо, на который сверху кладется ложка молочной пены. Пьют после приема пищи, не смешивая пену и кофе.",
                            EnergyValue = 19.0,
                            Gross = 110.0,
                            IsBlocked = false,
                            Net = 100.0,
                            Price = 2900m,
                            Title = "Макиато"
                        },
                        new
                        {
                            Id = new Guid("71755a93-7c3f-4137-bb5d-11c8b4539556"),
                            Country = "Германия",
                            Description = "Кофе с молоком, которое взбито в пышную пену, с нежной структурой. Сверху добавляет тертый шоколад, какао, корицу или сахарную пудру. Пьют капучино в перерывах между едой, в Италии – на родине рецепта, его употребляют лишь в первой половине дня, до 16 часов. Обычная порция – 150 грамм, оптимальная температура употребления – 60 градусов. Капучино часто сопровождают небольшими порциями десертов, печеньем, шоколадом.",
                            EnergyValue = 90.0,
                            Gross = 160.0,
                            IsBlocked = false,
                            Net = 150.0,
                            Price = 3100m,
                            Title = "Капучино"
                        },
                        new
                        {
                            Id = new Guid("8ba706ab-387f-41d4-9fa0-9f419bc0793e"),
                            Country = "Гренландия",
                            Description = "Готовят из одной части эспрессо и двух частей молока со взбитой пеной. Дополняют вкус разнообразными сиропами, из которых самые популярные – карамельный, шоколадный и клубничный. Употребляют в любое время, как коктейль, подают в высоких бокалах с соломинками",
                            EnergyValue = 200.0,
                            Gross = 160.0,
                            IsBlocked = false,
                            Net = 150.0,
                            Price = 3000m,
                            Title = "Латте"
                        },
                        new
                        {
                            Id = new Guid("202a5477-ce2d-4824-966a-afdc6422915a"),
                            Country = "Вануату",
                            Description = "Напиток, в котором эспрессо, молоко и пена из взбитых сливок или молока лежат слоями. Употребляют в перерывах между едой. Подают напиток в высоком бокале, пьют, не перемешивая слои, используя соломинку.",
                            EnergyValue = 29.0,
                            Gross = 160.0,
                            IsBlocked = false,
                            Net = 150.0,
                            Price = 3150m,
                            Title = "Латте макиато"
                        });
                });

            modelBuilder.Entity("Main.Application.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e58a4734-d89c-48eb-a65d-e0e192bdda7c"),
                            AccessFailedCount = 0,
                            Email = "admin@dekoff.ee",
                            EmailConfirmed = true,
                            IsBlocked = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@DEFOFF.EE",
                            NormalizedUserName = "АДМИН",
                            PasswordHash = "AQAAAAIAAYagAAAAEL2uqcJoPLAhCgVbiS7eSJP7k3KP+mKYyMYphy7qEhISToFUOp8TwA8E6dG1PjtqqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18D6AB4E-F06A-4458-B24F-33DCC663BAC9",
                            TwoFactorEnabled = false,
                            UserName = "Админ"
                        },
                        new
                        {
                            Id = new Guid("1799c9f1-e377-45fe-8858-d909d0c2f7a7"),
                            AccessFailedCount = 0,
                            Email = "adel@dekoff.ee",
                            EmailConfirmed = true,
                            IsBlocked = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADEL@DEFOFF.EE",
                            NormalizedUserName = "БАРИСТА_АДЕЛЬ",
                            PasswordHash = "AQAAAAIAAYagAAAAEN9vIszn3vMDBijPE09ncS4sIfSz3/QJVQ64CtX//yV2kEO4O9zaHcw/GcJqGxmKHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18D6AB4E-F06A-4458-B24F-33DCC663BAC9",
                            TwoFactorEnabled = false,
                            UserName = "Бариста_Адель"
                        },
                        new
                        {
                            Id = new Guid("a969812b-4fc3-4ffc-b739-2a467117f64e"),
                            AccessFailedCount = 0,
                            Email = "courier.dmitry@dekoff.ee",
                            EmailConfirmed = true,
                            IsBlocked = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "COURIER.DMITRY@DEFOFF.EE",
                            NormalizedUserName = "КУРЬЕР_ДМИТРИЙ",
                            PasswordHash = "AQAAAAIAAYagAAAAEFP61C1SSl6cxkWDLo/6AuUA3YF/J0ENRCbdtoiRt4arfm1gGY3mCzvcd9PQQF896g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18D6AB4E-F06A-4458-B24F-33DCC663BAC9",
                            TwoFactorEnabled = false,
                            UserName = "Курьер_Дмитрий"
                        },
                        new
                        {
                            Id = new Guid("b1f872ed-1a8b-4d71-8694-e9273287f8ec"),
                            AccessFailedCount = 0,
                            Email = "courier.ruslan@dekoff.ee",
                            EmailConfirmed = true,
                            IsBlocked = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "COURIER.RUSLAN@DEFOFF.EE",
                            NormalizedUserName = "КУРЬЕР_РУСЛАН",
                            PasswordHash = "AQAAAAIAAYagAAAAEGJtq/sjFcy7hNQZrxk4afWyTMSLgtPM4F4S0fVgfJvRFs52aTHLWmM+HPamnp8B1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18D6AB4E-F06A-4458-B24F-33DCC663BAC9",
                            TwoFactorEnabled = false,
                            UserName = "Курьер_Руслан"
                        },
                        new
                        {
                            Id = new Guid("0c3a4ac7-6fa2-4aad-a576-48ef57b1c999"),
                            AccessFailedCount = 0,
                            Email = "mansur@ema.il",
                            EmailConfirmed = true,
                            IsBlocked = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "MANSUR@EMA.IL",
                            NormalizedUserName = "МАНСУР",
                            PasswordHash = "AQAAAAIAAYagAAAAENmUGtwOY7Ut9EUiAUxQyDMKbUrImirmDpv18CwWGO++XSp19PwN65tTRi0DfLiw3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18D6AB4E-F06A-4458-B24F-33DCC663BAC9",
                            TwoFactorEnabled = false,
                            UserName = "Мансур"
                        },
                        new
                        {
                            Id = new Guid("780c9e97-6564-4a35-8195-9544ba50d904"),
                            AccessFailedCount = 0,
                            Email = "damir@ema.il",
                            EmailConfirmed = true,
                            IsBlocked = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "DAMIR@EMA.IL",
                            NormalizedUserName = "ДАМИР",
                            PasswordHash = "AQAAAAIAAYagAAAAEEEOVIjCLuRoF3iESCH5PTC3eADekDi26kEcCHkzH0z61UvFg6oCDNCuyO7ppzJlFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18D6AB4E-F06A-4458-B24F-33DCC663BAC9",
                            TwoFactorEnabled = false,
                            UserName = "Дамир"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("697f3429-c044-46de-aabd-1b8f801a9464"),
                            Name = "ADMIN_ROLE",
                            NormalizedName = "ADMIN_ROLE"
                        },
                        new
                        {
                            Id = new Guid("340126fb-e9c4-4857-9033-4a1e8af859b0"),
                            Name = "EXECUTOR_ROLE",
                            NormalizedName = "EXECUTOR_ROLE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e58a4734-d89c-48eb-a65d-e0e192bdda7c"),
                            RoleId = new Guid("697f3429-c044-46de-aabd-1b8f801a9464")
                        },
                        new
                        {
                            UserId = new Guid("1799c9f1-e377-45fe-8858-d909d0c2f7a7"),
                            RoleId = new Guid("340126fb-e9c4-4857-9033-4a1e8af859b0")
                        },
                        new
                        {
                            UserId = new Guid("a969812b-4fc3-4ffc-b739-2a467117f64e"),
                            RoleId = new Guid("340126fb-e9c4-4857-9033-4a1e8af859b0")
                        },
                        new
                        {
                            UserId = new Guid("b1f872ed-1a8b-4d71-8694-e9273287f8ec"),
                            RoleId = new Guid("340126fb-e9c4-4857-9033-4a1e8af859b0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("AddressUser", b =>
                {
                    b.HasOne("Main.Application.Models.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Main.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Main.Application.Models.Order", b =>
                {
                    b.HasOne("Main.Application.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Main.Application.Models.User", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId");

                    b.HasOne("Main.Application.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Main.Application.Models.Invoice", "Invoice", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.HasData(
                                new
                                {
                                    OrderId = new Guid("f1bc39f8-0434-4c23-ab66-0db72ac81b14")
                                },
                                new
                                {
                                    OrderId = new Guid("964d25df-c2ac-4511-b43f-6588394afd52")
                                });
                        });

                    b.OwnsMany("Main.Application.Models.OrderProduct", "Products", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int>("Count")
                                .HasColumnType("integer");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.HasKey("OrderId", "Id");

                            b1.HasIndex("ProductId");

                            b1.ToTable("OrderProduct");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.HasOne("Main.Application.Models.Product", "Product")
                                .WithMany()
                                .HasForeignKey("ProductId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Product");

                            b1.HasData(
                                new
                                {
                                    OrderId = new Guid("f1bc39f8-0434-4c23-ab66-0db72ac81b14"),
                                    Id = 1,
                                    Count = 3,
                                    ProductId = new Guid("cfbd118c-51e4-4a29-9ddd-58777d85e0a3")
                                },
                                new
                                {
                                    OrderId = new Guid("6b75f65b-52c5-402f-a446-a6c8ef14af80"),
                                    Id = 2,
                                    Count = 10000,
                                    ProductId = new Guid("8ba706ab-387f-41d4-9fa0-9f419bc0793e")
                                },
                                new
                                {
                                    OrderId = new Guid("f1bc39f8-0434-4c23-ab66-0db72ac81b14"),
                                    Id = 3,
                                    Count = 1,
                                    ProductId = new Guid("8ba706ab-387f-41d4-9fa0-9f419bc0793e")
                                },
                                new
                                {
                                    OrderId = new Guid("964d25df-c2ac-4511-b43f-6588394afd52"),
                                    Id = 4,
                                    Count = 1,
                                    ProductId = new Guid("71755a93-7c3f-4137-bb5d-11c8b4539556")
                                });
                        });

                    b.Navigation("Address");

                    b.Navigation("Executor");

                    b.Navigation("Invoice");

                    b.Navigation("Products");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Main.Application.Models.User", b =>
                {
                    b.OwnsOne("Main.Application.Models.Cart", "Cart", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.OwnsMany("Main.Application.Models.CartProduct", "Products", b2 =>
                                {
                                    b2.Property<Guid>("CartUserId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("Count")
                                        .HasColumnType("integer");

                                    b2.Property<Guid>("ProductId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("CartUserId", "Id");

                                    b2.HasIndex("ProductId");

                                    b2.ToTable("CartProduct");

                                    b2.WithOwner()
                                        .HasForeignKey("CartUserId");

                                    b2.HasOne("Main.Application.Models.Product", "Product")
                                        .WithMany()
                                        .HasForeignKey("ProductId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.Navigation("Product");

                                    b2.HasData(
                                        new
                                        {
                                            CartUserId = new Guid("0c3a4ac7-6fa2-4aad-a576-48ef57b1c999"),
                                            Id = 1,
                                            Count = 2,
                                            ProductId = new Guid("71755a93-7c3f-4137-bb5d-11c8b4539556")
                                        },
                                        new
                                        {
                                            CartUserId = new Guid("0c3a4ac7-6fa2-4aad-a576-48ef57b1c999"),
                                            Id = 2,
                                            Count = 1,
                                            ProductId = new Guid("8ba706ab-387f-41d4-9fa0-9f419bc0793e")
                                        });
                                });

                            b1.Navigation("Products");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("e58a4734-d89c-48eb-a65d-e0e192bdda7c")
                                },
                                new
                                {
                                    UserId = new Guid("1799c9f1-e377-45fe-8858-d909d0c2f7a7")
                                },
                                new
                                {
                                    UserId = new Guid("a969812b-4fc3-4ffc-b739-2a467117f64e")
                                },
                                new
                                {
                                    UserId = new Guid("b1f872ed-1a8b-4d71-8694-e9273287f8ec")
                                },
                                new
                                {
                                    UserId = new Guid("0c3a4ac7-6fa2-4aad-a576-48ef57b1c999")
                                },
                                new
                                {
                                    UserId = new Guid("780c9e97-6564-4a35-8195-9544ba50d904")
                                });
                        });

                    b.Navigation("Cart")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Main.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Main.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Main.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Main.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
